{% import "util_macros.c.jinja" as u with context %}


{% macro mul_declare() %}
void lo_mul(long m, long *w, double *x,
                    long *Ap, long *Aj, double *Ax,
                    long *Bp, long *Bj, double *Bx,
                    long *Zp, long *Zj, double *Zx);
{% endmacro %}


{% macro lo_mul_define() %}
/* Computes Z = A*B. */
void mul(long m, long *w, double *x,
                    long *Ap, long *Aj, double *Ax,
                    long *Bp, long *Bj, double *Bx,
                    long *Zp, long *Zj, double *Zx){
  long i, j, k, p, p2, q, q2, r=0;
  double Aij;
  for(i=0; i<m; i++)  w[i] = 0;
  Zp[0] = 0;
  for(i=0; i<m; i++){
    Zp[i+1] = Zp[i];
    p2 = Ap[i+1];
    for(p=Ap[i]; p<p2; p++){
      j = Aj[p];
      Aij = Ax[p];
      q2 = Bp[j+1];
      for(q=Bp[j]; q<q2; q++){
        k = Bj[q];
        if(w[k] < i+1){
          w[k] = i+1;
          x[k] = Aij * Bx[q];
          Zj[r++] = k;
          Zp[i+1]++;
        }
        else{
          x[k] += Aij * Bx[q];
        }
      }
    }
    for(p=Zp[i]; p<Zp[i+1]; p++){
      Zx[p] = x[Zj[p]];
    }
  }
}
{% endmacro %}


{% macro lo_mul_eval(expr) %}
mul({{ expr.size[0] }}l, work->work_int, work->work_double,
{{- u.rowptr(expr.args[0]) }},
{{- u.colidx(expr.args[0]) }},
{{-  u.nzval(expr.args[0]) }},
{{- u.rowptr(expr.args[1]) }},
{{- u.colidx(expr.args[1]) }},
{{-  u.nzval(expr.args[1]) }},
{{- u.rowptr(expr) }},
{{- u.colidx(expr) }},
{{-  u.nzval(expr) }});
{% endmacro %}
