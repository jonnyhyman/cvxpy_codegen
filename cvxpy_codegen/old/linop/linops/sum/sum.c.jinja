{% import "util_macros.c.jinja" as u with context %}


{% macro sum_declare() %}
void lo_sum(long m, long n, long *w, double *x,
                   long *Ap, long *Aj, double *Ax,
                   long *Bp, long *Bj, double *Bx,
                   long *Zp, long *Zj, double *Zx);
{% endmacro %}


{% macro sum_define() %}
void lo_sum(long m, long n, long *w, double *x,
                   long *Ap, long *Aj, double *Ax,
                   long *Bp, long *Bj, double *Bx,
                   long *Zp, long *Zj, double *Zx){
  long i, j, p, p2, q=0;
  Zp[0] = 0;
  for(i=0; i<m; i++){
    Zp[i+1] = Zp[i];
    p2 = Ap[i+1];
    for(p=Ap[i]; p<p2; p++){
      j = Aj[p];
      w[j] = i+1;
      Zj[q++] = j;
      x[j] = Ax[p];
      Zp[i+1]++;
    }
    p2 = Bp[i+1];
    for(p=Bp[i]; p<p2; p++){
      j = Bj[p];
      if(w[j] < i+1){
        Zj[q++] = j;
        x[j] = Bx[p];
        Zp[i+1]++;
      }
      else{
        x[j] += Bx[p];
      }
    }
    p2 = Zp[i+1];
    for(p=Zp[i]; p<p2; p++) Zx[p] = x[Zj[p]];
  }
}
{% endmacro %}


{% macro sum_eval(expr) %}
lo_sum({{ expr.size[0] * expr.size[1] }}l, 
{{- x_length -}}l, work->work_int, work->work_double,
{{- u.rowptr(expr.args[0]) }},
{{- u.colidx(expr.args[0]) }},
{{-  u.nzval(expr.args[0]) }},
{{- u.rowptr(expr.args[1]) }},
{{- u.colidx(expr.args[1]) }},
{{-  u.nzval(expr.args[1]) }},
{{- u.rowptr(expr) }},
{{- u.colidx(expr) }},
{{-  u.nzval(expr) }});
{% endmacro %}
